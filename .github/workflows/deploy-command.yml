name: Deploy command
# Requires secrets:
# GITHUB_TOKEN

env:
  AWS_ACCOUNT_ID: 590184101838
  AWS_REGION: us-east-1
  AWS_ECS_CLUSTER: cluster

on:
  workflow_call:
    # Requires secrets: inherit
    inputs:
      command:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      aws-app:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: smzelek/aws-hosting
          ref: main
          path: .github/actions
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ inputs.aws-app }}-github-role"
          aws-region: "${{ env.AWS_REGION }}"
          mask-aws-account-id: 'no'
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "${{ env.AWS_ACCOUNT_ID }}"
          mask-password: "true"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Build and Push to ECR
        id: docker
        shell: bash
        env: 
          IMAGE_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-app }}:command-${{ github.sha }}"
          CACHE_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-app }}:command-cache"
        run: |
          docker buildx build --push \
            --platform linux/arm64 \
            --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref="${{ env.CACHE_TAG }}" \
            --cache-from type=registry,ref="${{ env.CACHE_TAG }}" \
            -t "${{ env.IMAGE_TAG }}" \
            -f "${{ inputs.dockerfile }}" .
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Render Amazon ECS Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: "${{ inputs.aws-app }}-command"
          container-name: "${{ inputs.aws-app }}-command"
          image: "${{ steps.docker.outputs.image }}"
          command: ${{ inputs.command }}
      - name: Run Amazon ECS task definition
        uses: ./.github/actions/actions/run-ecs-command
        with:
          task-definition-json-file: "${{ steps.render-task-definition.outputs.task-definition }}"
          cluster-name: "${{ env.AWS_ECS_CLUSTER }}"
