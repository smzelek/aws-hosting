# telegraf --config ./telegraf.conf --debug --test

[agent] 
  hostname = "haproxy" 
  interval = "15s"
  quiet = false

# [[outputs.file]]
#   files = ["stdout"]

[[outputs.cloudwatch]]
  region = "us-east-1"
  namespace = "TelegrafMetrics"

[[inputs.mem]]
  fieldpass = ["used", "total"]
  tagexclude = ["host"]

  [inputs.mem.tags]
    instance_id="${EC2_INSTANCE_ID}"

[[inputs.prometheus]]
  urls = ["http://localhost:8405/metrics"]
  namepass = [
    "haproxy_backend_response_time_average_seconds",
    "haproxy_backend_http_responses_total",
    "haproxy_server_status"
  ]
  tagexclude = ["host", "url"]

  [inputs.prometheus.tagdrop]
    code = ["1xx", "other"]
    state = ["DOWN"]

# Merge haproxy_server_status count across different servers
# Relies on the fact that srv1 and UP are the first metric.
[[processors.starlark]]
  namepass = ["haproxy_server_status"]
  tagpass = [""]
  source = '''
state = {}

def apply(metric):
  site = metric.tags["proxy"]
  server = metric.tags["server"]
  status = metric.tags["state"]
  current = metric.fields["gauge"]

  state.setdefault(site, { "UP": 0, "DOWN": 0, "TOTAL": 0 })
  metrics = []

  if server.endswith("1") and status == "UP" and state[site]["TOTAL"] > 0:
    down = Metric("service_task_status")
    down.fields["gauge"] = state[site]["DOWN"]
    down.tags["state"] = "down"
    down.tags["proxy"] = site

    up = Metric("service_task_status")
    up.fields["gauge"] = state[site]["UP"]
    up.tags["state"] = "up"
    up.tags["proxy"] = site

    state[site] = { "UP": 0, "DOWN": 0, "TOTAL": 0 }
    metrics = [down, up]
  
  state[site]["TOTAL"] += current
  if status == "UP":
    state[site]["UP"] += current
  else:
    state[site]["DOWN"] += current

  return metrics
'''

# Get number of responses by code per flush period
[[processors.starlark]]
  namepass = ["haproxy_backend_http_responses_total"]
  source = '''
state = {}

def apply(metric):
  site = metric.tags["proxy"]
  code = metric.tags["code"]
  current = metric.fields["counter"]

  state.setdefault(site, {})
  state[site].setdefault(code, current)
  diff = current - state[site][code]

  state[site][code] = current

  metric.name="response_status_counts"
  metric.fields["counter"] = diff

  return metric
'''

[[processors.rename]]
  [[processors.rename.replace]]
    measurement = "mem"
    dest = "memory_utilization"
    
  [[processors.rename.replace]]
    tag = "proxy"
    dest = "service"
    